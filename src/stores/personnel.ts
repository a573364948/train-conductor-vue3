import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import type { EnhancedConductor, PersonnelChange, ApplicationSettings } from '@/types'
import { useMainStore } from './index'

export const usePersonnelStore = defineStore('personnel', () => {
  // 状态
  const enhancedConductors = ref<Record<string, EnhancedConductor>>({})
  const personnelChanges = ref<PersonnelChange[]>([])
  const applicationSettings = ref<ApplicationSettings>({
    tempPeriod: 3,
    autoExpiry: false,
    approvalRequired: false
  })
  const loading = ref(false)
  const error = ref<string | null>(null)

  // 获取主Store实例
  const mainStore = useMainStore()

  // 计算属性
  const allConductors = computed(() => Object.values(enhancedConductors.value))

  const getConductorsByStatus = computed(() => {
    return (status: string) => 
      allConductors.value.filter(c => c.status === status)
  })

  const getConductorsByDepartment = computed(() => {
    return (department: string) =>
      allConductors.value.filter(c => c.department === department)
  })

  const statusStatistics = computed(() => {
    const conductors = allConductors.value
    return {
      正式启用: conductors.filter(c => c.status === '正式启用').length,
      临时启用: conductors.filter(c => c.status === '临时启用').length,
      后备: conductors.filter(c => c.status === '后备').length,
      免职: conductors.filter(c => c.status === '免职').length,
      total: conductors.length
    }
  })

  const departmentStatistics = computed(() => {
    const stats: Record<string, any> = {}
    allConductors.value.forEach(conductor => {
      if (!stats[conductor.department]) {
        stats[conductor.department] = {
          department: conductor.department,
          正式启用: 0,
          临时启用: 0,
          后备: 0,
          免职: 0,
          total: 0
        }
      }
      stats[conductor.department][conductor.status]++
      stats[conductor.department].total++
    })
    return Object.values(stats)
  })

  // 操作方法
  const addConductor = async (conductorData: Partial<EnhancedConductor>) => {
    try {
      loading.value = true
      error.value = null

      const id = generateId()
      const newConductor: EnhancedConductor = {
        id,
        name: conductorData.name || '',
        department: conductorData.department || '',
        employeeId: conductorData.employeeId || '',
        status: conductorData.status || '后备',
        note: conductorData.note || '',
        createdAt: Date.now(),
        updatedAt: Date.now(),
        ...conductorData
      }

      enhancedConductors.value[id] = newConductor

      // 记录异动
      await addPersonnelChange({
        employeeId: newConductor.employeeId,
        employeeName: newConductor.name,
        changeType: '入职',
        toStatus: newConductor.status,
        toDepartment: newConductor.department,
        changeDate: new Date().toISOString().split('T')[0],
        operator: '系统',
        reason: '新增人员',
        isAutoGenerated: false
      })

      await saveToDatabase()
      return newConductor
    } catch (err) {
      error.value = err instanceof Error ? err.message : '添加人员失败'
      throw err
    } finally {
      loading.value = false
    }
  }

  const updateConductor = async (id: string, updates: Partial<EnhancedConductor>) => {
    try {
      loading.value = true
      error.value = null

      const current = enhancedConductors.value[id]
      if (!current) {
        throw new Error('人员不存在')
      }

      const oldStatus = current.status
      const oldDepartment = current.department

      const updated = {
        ...current,
        ...updates,
        updatedAt: Date.now()
      }

      enhancedConductors.value[id] = updated

      // 记录状态变更异动
      if (updates.status && updates.status !== oldStatus) {
        await addPersonnelChange({
          employeeId: current.employeeId,
          employeeName: current.name,
          changeType: '状态变更',
          fromStatus: oldStatus,
          toStatus: updates.status,
          changeDate: new Date().toISOString().split('T')[0],
          operator: '系统',
          reason: '状态更新',
          isAutoGenerated: false
        })
      }

      // 记录部门调动异动
      if (updates.department && updates.department !== oldDepartment) {
        await addPersonnelChange({
          employeeId: current.employeeId,
          employeeName: current.name,
          changeType: '部门调动',
          fromDepartment: oldDepartment,
          toDepartment: updates.department,
          changeDate: new Date().toISOString().split('T')[0],
          operator: '系统',
          reason: '部门调整',
          isAutoGenerated: false
        })
      }

      await saveToDatabase()
      return updated
    } catch (err) {
      error.value = err instanceof Error ? err.message : '更新人员失败'
      throw err
    } finally {
      loading.value = false
    }
  }

  const deleteConductor = async (id: string) => {
    try {
      loading.value = true
      error.value = null

      const conductor = enhancedConductors.value[id]
      if (!conductor) {
        throw new Error('人员不存在')
      }

      // 记录离职异动
      await addPersonnelChange({
        employeeId: conductor.employeeId,
        employeeName: conductor.name,
        changeType: '离职',
        fromStatus: conductor.status,
        fromDepartment: conductor.department,
        changeDate: new Date().toISOString().split('T')[0],
        operator: '系统',
        reason: '人员删除',
        isAutoGenerated: false
      })

      delete enhancedConductors.value[id]
      await saveToDatabase()
    } catch (err) {
      error.value = err instanceof Error ? err.message : '删除人员失败'
      throw err
    } finally {
      loading.value = false
    }
  }

  const addPersonnelChange = async (changeData: Omit<PersonnelChange, 'id' | 'createdAt' | 'updatedAt'>) => {
    const change: PersonnelChange = {
      id: generateId(),
      createdAt: Date.now(),
      updatedAt: Date.now(),
      ...changeData
    }
    
    personnelChanges.value.unshift(change) // 新记录放在最前面
    
    // 保存到数据库
    await saveToDatabase()
    
    return change
  }

  const createApplicationRelatedChange = async (
    application: any,
    conductor: EnhancedConductor,
    oldStatus: string
  ) => {
    let changeType: PersonnelChange['changeType'] = '状态变更'
    let reason = `申请审批：${application.type}申请已通过`
    
    // 部门变更检查
    const departmentChanged = application.targetDepartment !== application.currentDepartment
    if (departmentChanged) {
      changeType = '部门调动'
      reason += `，同时调动至${application.targetDepartment}`
    }

    const changeData: Omit<PersonnelChange, 'id' | 'createdAt' | 'updatedAt'> = {
      employeeId: conductor.employeeId,
      employeeName: conductor.name,
      changeType,
      fromStatus: oldStatus,
      toStatus: conductor.status,
      fromDepartment: departmentChanged ? application.currentDepartment : undefined,
      toDepartment: departmentChanged ? application.targetDepartment : undefined,
      changeDate: application.approvalDate || new Date().toISOString().split('T')[0],
      reason,
      operator: application.approver || '系统',
      notes: application.note || undefined,
      relatedApplicationId: application.id,
      isAutoGenerated: true
    }

    return addPersonnelChange(changeData)
  }

  const getPersonnelChanges = (filters?: {
    employeeId?: string
    changeType?: string
    dateRange?: [string, string]
    department?: string
    isAutoGenerated?: boolean
  }) => {
    let filtered = [...personnelChanges.value]

    if (filters?.employeeId) {
      const query = filters.employeeId.toLowerCase()
      filtered = filtered.filter(change => 
        change.employeeId.toLowerCase().includes(query) ||
        change.employeeName.toLowerCase().includes(query)
      )
    }

    if (filters?.changeType) {
      filtered = filtered.filter(change => change.changeType === filters.changeType)
    }

    if (filters?.dateRange) {
      const [startDate, endDate] = filters.dateRange
      filtered = filtered.filter(change => 
        change.changeDate >= startDate && change.changeDate <= endDate
      )
    }

    if (filters?.department) {
      filtered = filtered.filter(change => 
        change.fromDepartment === filters.department ||
        change.toDepartment === filters.department
      )
    }

    if (filters?.isAutoGenerated !== undefined) {
      filtered = filtered.filter(change => change.isAutoGenerated === filters.isAutoGenerated)
    }

    return filtered.sort((a, b) => b.createdAt - a.createdAt)
  }

  const getPersonnelChangeStatistics = () => {
    const stats = {
      total: personnelChanges.value.length,
      byType: {
        '状态变更': 0,
        '部门调动': 0,
        '职务调整': 0,
        '入职': 0,
        '离职': 0,
        '其他': 0
      },
      byMonth: {} as Record<string, number>,
      recentChanges: personnelChanges.value.slice(0, 10),
      autoGenerated: personnelChanges.value.filter(c => c.isAutoGenerated).length,
      manual: personnelChanges.value.filter(c => !c.isAutoGenerated).length
    }

    personnelChanges.value.forEach(change => {
      stats.byType[change.changeType]++
      
      const month = change.changeDate.substring(0, 7)
      stats.byMonth[month] = (stats.byMonth[month] || 0) + 1
    })

    return stats
  }

  const deletePersonnelChange = async (changeId: string) => {
    const index = personnelChanges.value.findIndex(change => change.id === changeId)
    if (index === -1) {
      throw new Error('异动记录不存在')
    }

    // 检查是否为自动生成的记录
    const change = personnelChanges.value[index]
    if (change.isAutoGenerated) {
      throw new Error('自动生成的异动记录不能删除')
    }

    personnelChanges.value.splice(index, 1)
    await saveToDatabase()
  }

  const updatePersonnelChange = async (changeId: string, updateData: Partial<PersonnelChange>) => {
    const index = personnelChanges.value.findIndex(change => change.id === changeId)
    if (index === -1) {
      throw new Error('异动记录不存在')
    }

    const change = personnelChanges.value[index]
    if (change.isAutoGenerated) {
      throw new Error('自动生成的异动记录不能修改')
    }

    personnelChanges.value[index] = {
      ...change,
      ...updateData,
      updatedAt: Date.now()
    }

    await saveToDatabase()
  }

  const getPersonnelChangesByEmployee = (employeeId: string) => {
    return personnelChanges.value
      .filter(change => change.employeeId === employeeId)
      .sort((a, b) => b.createdAt - a.createdAt)
  }

  const syncWithMainStore = async () => {
    try {
      loading.value = true
      
      // 将现有的基础Conductor数据转换为EnhancedConductor
      const basicConductors = mainStore.conductors
      
      basicConductors.forEach(conductor => {
        if (!enhancedConductors.value[conductor.id]) {
          enhancedConductors.value[conductor.id] = {
            ...conductor,
            employeeId: conductor.id, // 使用现有ID作为工号
            status: '正式启用', // 默认状态
            note: '',
            createdAt: Date.now(),
            updatedAt: Date.now()
          }
        }
      })

      await saveToDatabase()
    } catch (err) {
      error.value = err instanceof Error ? err.message : '同步数据失败'
      throw err
    } finally {
      loading.value = false
    }
  }

  // 自动数据同步：如果enhancedConductors为空但mainStore有数据，自动同步
  const autoSyncIfNeeded = async () => {
    const hasEnhancedData = Object.keys(enhancedConductors.value).length > 0
    const hasBasicData = mainStore.conductors.length > 0
    
    if (!hasEnhancedData && hasBasicData) {
      console.log('🔄 检测到数据不一致，自动同步中...')
      await syncWithMainStore()
      console.log('✅ 数据同步完成')
    }
  }

  const saveToDatabase = async () => {
    if (!mainStore.database) return false

    // 更新数据库
    mainStore.database.enhancedConductors = enhancedConductors.value
    mainStore.database.personnelChanges = personnelChanges.value
    mainStore.database.applicationSettings = applicationSettings.value

    return await mainStore.saveDatabase()
  }

  const loadFromDatabase = async () => {
    if (!mainStore.database) return

    // 加载增强的人员数据
    if (mainStore.database.enhancedConductors) {
      enhancedConductors.value = mainStore.database.enhancedConductors
    }

    // 加载异动记录
    if (mainStore.database.personnelChanges) {
      personnelChanges.value = mainStore.database.personnelChanges
    }

    // 加载申请配置
    if (mainStore.database.applicationSettings) {
      applicationSettings.value = mainStore.database.applicationSettings
    }

    // 自动同步数据（如果需要）
    await autoSyncIfNeeded()
  }

  // 工具函数
  const generateId = () => {
    return Date.now().toString(36) + Math.random().toString(36).substr(2)
  }

  const getConductorByEmployeeId = (employeeId: string) => {
    return allConductors.value.find(c => c.employeeId === employeeId)
  }

      return {
    // 状态
    enhancedConductors,
    personnelChanges,
    applicationSettings,
    loading,
    error,

    // 计算属性
    allConductors,
    getConductorsByStatus,
    getConductorsByDepartment,
    statusStatistics,
    departmentStatistics,

    // 操作方法
    addConductor,
    updateConductor,
    deleteConductor,
    addPersonnelChange,
    createApplicationRelatedChange,
    getPersonnelChangesByEmployee,
    getPersonnelChanges,
    getPersonnelChangeStatistics,
    deletePersonnelChange,
    updatePersonnelChange,
    syncWithMainStore,
    autoSyncIfNeeded,
    saveToDatabase,
    loadFromDatabase,
    getConductorByEmployeeId
  }
}) 